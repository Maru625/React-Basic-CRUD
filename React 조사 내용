React
SPI(Single Page Application) Front-end Frame-work


라이브러리와 프레임 워크
다른 사람이 작성하여 개발자가 사용할 수 있는 코드를 말함
차이점은 누가 누구를 컨트롤 하는가가 둘의 차이를 만듬
    1. 라이브러리
        예시) JQuery
    개발자가 필요로 할때 라이브러리를 소환을 하여 사용
    => 쉽게 대체가 될 수 있다는 점이 있음

    2. 프레임워크
        예시) React
    개발자가 프레임워크를 부르는 것이 아님, 프레임 워크가 개발자를 컨트롤함
    프레임워크로 일을 할 경우에는 프레임 워크의 규칙을 따라야 함, 프레임워크가 코드의 규칙을 정하고 알려줌
    프레임워크의 규칙에 따라 코드를 작성하면 프레임워크가 이를 실행하기 때문,
    실행하는 규칙을 개발자가 정할 수 없음
but React J.S의 경우 코드를 작성하는 특별한 규칙이 정해지지 않고 개발자가 불러 올 수 있음,
다만 React가 불러온다면 React가 동작하는 안에서는 독자적으로 component를 불러 올 수 있기 때문에 Frame-Work라 할 수 있음
기본적인 정의가 위와 같을뿐 정확한 정의라 할 수 있는 규격은 없음

정적 웹,  동적 웹
- 정적 웹: 움직이지 않는, 언제 접속하여도 같은 리소스를 보여주는 웹사이트
        정보가 변할 필요가 없는 소개 글이나 정보 전달 글 같은 경우에 사용 가능
- 동적 웹: SNS나 사용자 이용 게시판 같은 정보가 끊임없이 변하는 웹사이트를 매번 업데이트를 할 수 없으므로, 이를 해결하기 위해서 만들어진 기술이 동적 웹임

MVC 웹 프레임워크
Model : 데이터에 관련된 것들
View : 눈에 보이는 웹사이트등의 요소
Controller : Model의 데이터를 View에 연결하여 사용자가 이러한 데이터를 가공 할 수 있도록 하는 제어를 하는 파트를 말함
- 동적 웹을 만드는데 자주 사용됨

SPI(Single Page Application) Front-end Frame-work
- MVC 프레임 워크의 단점
    많은 데이터를 가진 서버의 웹사이트의 경우, 하나의 변경점이 생겨도 모든 작업을 처음부터 다시 수행하다 보니 웹사이트의 반응 속도가 느려짐
    모바일 기기에서도 서비스를 해야 되는 경우가 많이 생기면서, 많은 변수에 대응하여야 하다 보니 하나의 사이트 개발에도 개발 인력이 크게 증가하였음
서버에서 데이터만 보내 주더라도 브라우저에서 HTML, CSS, JS로 랜더링 해 낼 수 있다면 위의 단점이 없어질 수 있음 이렇게 나온 프레임 워크임
- 즉, 서버에서 수행하던 연산량을 줄이고, HTML, CSS, J.S데이터를 모두 보낸 뒤, 사용자의 컴퓨터에서 브라우저가 이러한 연산을 할 수 있도록 J.S를 
    작성할 수 잇도록 도와줌

