자바 스크립트
1. 변수
- 어떤 정보에 이름을 붙여서 저장하고 싶을때 사용   ex) age=30; name="java";
- 사용하고 있는 예약어로는 변수명을 사용 할 수 없음
- alert:경고창을 띄우는 함수
- console.log():로그를 찍는 함수
- 같은 변수 명을 가지는 변수가 여러개 설정되었을 경우, 마지막에 선언된 변수로 덮어 씌워짐
- let : 같은 변수명을 가지는지 확인 할 수 있음 ex) let name="mike"에서 구문 오류가 발생한다면 이는 앞에서 사용한 변수명이라는것임
- const : 절대로 바뀌지 않는 상수를 선언 (pi 생일등 바뀌지 않는 값, 대문자로 선언하는것이 일종의 규칙)


2. 자료형
- 문자열은 ", ', `으로 감싸서 나타내어야 함
- ``는 문자열 내부에 변수를 넣어야 할 경우 사용하면 편리함
    ex) const massage1=`my name is ${name}`;
        console.log(massage1);

- Boolean : 참 거짓을 나타내는 자료형, 논리값, ture (1), false (0)
- undefined : 값이 할당되지 않음
- null : 존재하지 않음을 의미, object로 나오지만 객체는 아님, 오류
- typeof : 변수의 자료형을 알아내는 함수

3. 함수 1
- alert() : 알려줌, 메세지를 띄우고 확인 버튼을 누르기 까지 떠있음, 알림창 출력
- prompt() : 사용자에게 값을 입력 받을 경우 사용
    prompt에 취소를 누르면 변수에는 Null값이 들어감, defult 값 제공도 가능
    ex) name = prompt("이름을 입력하세요.");
        name = prompt("이름을 입력하세요.". "mike");
- confirm() : 뭔가 확인 받을 경우 사용 가능
            변수공간에는 Boolean 자료형이 들어감
    ex) const isAult = confirm("당신은 성인인가요");
- 단점: 창이 떠있는 동안에는 script가 일시 정지함
        스타일링이 불가능함
        but 빠르고 간단하게 적용 가능한 큰 장점

4. 형변환
- Prompt로 입력받은 모든 값은 문자형으로 입력됨, 이를 변형할 필요가 있음
- 자동 형 변환 : ex)/, 나눗셈
- 자동 형변환을 줄이기 위해 명시적 형 변환을 이용함
- String() : 입력 인수를 문자형으로 변환함
- Number() : 입력 인수를 숫자형으로 변환하여줌, prompt입력값을 변환하는데 자주 사용됨
                but Number(null)=0, Number(undefined)=NaN이 됨, 이는 외워야함
- Boolean() : 입력 인수를 boolean형을 변환,
                숫자 0, 빈 문자열, null, NaN, undefined => false, 나머지는 모두 ture

5. 기본 연산자
- %(나머지), +, -, **(자승), /(나눗셈)
- 증가 연산자(++), 감소 연산자(--)
    연산자의 위치가 변수 앞에 있으면 연산된 값이 결과로 들어가고, 연산자의 위치가 변수 뒤이면 연산되기 전의 값이 결과로 들어감

6. 비교 연산자, 조건문
- 비교 연산자 : 부등호
- 조건문
    ex) if( age > 10){
        console.log("~~~");
    }

7. 논리 연산자
- OR(||), AND(&&), NOT(!)
-boolean 자료형의 논리 연산을 하는데 사용하는 연산자

8. 반목문 loop
- 동일한 작업을 여러번 반목
    ex) for (let i=0; i<0;i++){
        //반복 코드
    }
    ex) let i=0;
    while(i<10){
        //code
        i++;
    }
    ex) let i=0;
    do {
        //code
        i++;
    } while(i<10) 
    한번은 무조건 실행하게 되는 반복문
- continue, break: 조건문과 반복문을 중단하는 예약어

9. 함수(function)
- 반복되는 작업을 간결화 하기 위해서
ex) function 함수명(매개변수){
    //작업 내용
}
함수명(input 변수);
- 함수 내부에서 선언된 변수는 지역 변수, 함수 외부에서는 지역 변수에 접근 불가능함
- 같은 이름으로 선언 된다하더라도 서로에 대한 간섭 없음
- 함수 내부의 결과는 return 예약어로 반환 할 수 있음, 이때 이 이후의 함수 코드는 종료 된다

10. 함수 표현식
- 위에서 사용한 함수 표기법이 함수 선언문
- 함수 표현식의 예시
    let sayHello =function(){
        //함수 작업 code
    }
    sayHello()
- 함수 선언문의 경우 코드의 어디서든 호출이 가능하다, 하지만 함
- 자바 스크립트의 경우 코드 내부의 모든 함수를 초기에 다 찾음, 따라서 함수 앞에서 함수를 사용한다 하더라도 함수 이용이 가능
- 함수 표현식의 경우 일반적인 코드 실행과 마찬가지로 순차적으로 실행되므로 함수 선언 뒤에서 함수의 이용이 가능하다
- 화살표 함수의 예시
    let sayHello = ()=>{
        //함수 작업 code
    }
    sayHello()

11. 객체(Object)
- 객체에 접근, 추가 하기 위해서는 객체명 뒤에 .을 붙이거나 대괄호를 활용한다.
- 삭제는 delete 키워드를 이용하면 된다. 삭제하고자 하는 객체 앞에 사용하면 된다.
    ex) delete object.~;
- in 예약어를 통하여 객체 내에 있는 변수인지를 boolean 자료형으로 반환 하여 준다
- 객체 내에 함수도 할당이 가능, 이렇게 객체 프로퍼티로 할댕된 함수를 method라고 한다
- 화살표 함수 표현법에서 this는 글로벌 구간에서의 변수를 의미함으로 객체 내의 함수를 선언할 경우에는 화살표 함수 표현법을 사용
  하지 않는 것이 좋다

  12. 배열(Array)
  - 순서가 잇는 list라고 생각하면 됨
  - 대괄호로 묶고 순소대로 쉼표를 사용하면 됨
  - 순서를 index라고 함
  - 배열은 문자 뿐만 아니라, 숫자, 객체, 함수 등도 포함 할 수 있다
  - push(): 배열 제일 끝에 요소를 추가하는 method
  - pop() : 배일 제일 끝의 요소를 제거 하는 method
  - shift() : 배열 제일 처음의 요소를 제거하는 method
  - unshift() : 배열 제일 앞의 요소를 추가하는 method
  - 배열을 쓰는 가장 큰 이유중 하나는 for 반복문 때문임, length를 통해 배열의 길이를 알 수 있으므로
  - 객체에서 for문을 쓰는 for in방식과 유사한 형태로 for of 문 역시 사용 할 수 있음, 이 경우 length를 사용하지 않아도 됨

